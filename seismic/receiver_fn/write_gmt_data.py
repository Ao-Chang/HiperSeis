"""
Formats the results of pointsets2grid into files that can be plotted
by GMT.
"""
import os
import json

import click
import numpy as np

from seismic.receiver_fn.moho_config import ConfigConstants as cc

def from_config(config_file):
    """
    Loads interpolation results generated by pointsets2grid and converts
    them to ASCII files that can be plotted by GMT. The files are output
    to the output directory specificed in the config, under a
    subdirectory 'gmt_data'.

    Files written:

      - {method_name}_loc: For each method in the config file, a 
        location file of format `LON LAT WEIGHT` is written. Each row
        is a station/sample location, and the weight is the total 
        relative weighting (dataset weight * sample weight if sample
        weights enabled, else dataset weight).
      - moho_grid: The interpolated depth grid of format `LON LAT DEPTH`.
        Is in a suitable format to be converted to a NetCDF grid by 
        GMT.
      - moho_gradient: The gradient grid of format
        `LON LAT ANGLE MAGNITUDE`. The lon/lat position is the start 
        of the vector tail, the angle is degrees counter-clockwise from
        horizontal and the magnitude is in decimal degrees.

    Parameters
    ----------
    config_file : str or bytes
        Path to the Moho workflow config file.
    """
    print("Writing data for GMT plotting")
    with open(config_file, 'r') as f:
        config = json.load(f)

    outdir = config.get(cc.OUTPUT_DIR, os.getcwd())

    gmt_outdir = os.path.join(outdir, cc.GMT_DIR)
    if not os.path.exists(gmt_outdir):
        os.mkdir(gmt_outdir)

    # Convert moho depth grid to GMT digestible format
    grid_data = os.path.join(outdir, cc.MOHO_GRID)
    with open(grid_data, 'r') as fr:
        grid_ds = np.loadtxt(fr, delimiter=',', skiprows=3)
    # Remove std dev column
    grid_ds = np.delete(grid_ds, -1, 1)
    grid_data_gmt = os.path.join(gmt_outdir, cc.MOHO_GRID_GMT)
    with open(grid_data_gmt, 'w') as fw:
        np.savetxt(fw, grid_ds, fmt=['%.6f', '%.6f', '%.2f'], delimiter=' ')

    # Do the same for gradient grid
    grad_data = os.path.join(outdir, cc.MOHO_GRAD)
    with open(grad_data, 'r') as fr:
        grad_ds = np.loadtxt(fr, delimiter=',', skiprows=3)
    # Convert to polar coordinates
    r = np.sqrt(grad_ds[:, 2]**2 + grad_ds[:, 3]**2)
    t = np.arctan2(grad_ds[:, 3], grad_ds[:, 2])
    t *= 180.0/np.pi
    grad_ds[:, 2] = t
    grad_ds[:, 3] = r
    grad_data_gmt = os.path.join(gmt_outdir, cc.MOHO_GRAD_GMT)
    with open(grad_data_gmt, 'w') as fw:
        np.savetxt(fw, grad_ds, fmt=['%.6f', '%.6f', '%.6f', '%.6f'], delimiter=' ')

    # Output network/method locations and sample weight * dataset weight
    # Total relative weighting can be used as symbol size on maps
    methods = config[cc.METHODS]
    for method_params in methods:
        method = method_params[cc.NAME]
        data = _format_locations(method_params)
        outfile = os.path.join(gmt_outdir, f'{method}' + cc.LOCATIONS_GMT)
        with open(outfile, 'w') as fw:
            np.savetxt(fw, data, fmt=['%.6f', '%.6f', '%.2f'], delimiter= ' ')
    print(f"Complete! Data files saved to '{gmt_outdir}'")


def _format_locations(method_params):
    """
    Formats sample data to LON LAT TOTAL_WEIGHT.
    """
    col_names = ['sta', 'lon', 'lat', 'depth', 'weight']
    data = np.genfromtxt(method_params[cc.DATA], delimiter=',', dtype=None, encoding=None,
                         names=col_names)
    # Remove depth column
    method_weight = method_params[cc.WEIGHT]
    total_weight = method_weight * data['weight']
    data = np.array((data['lon'], data['lat'], total_weight)).T
    return data


@click.command()
@click.argument('config-file', type=click.Path(exists=True, dir_okay=False), required=True)
def main(config_file):
    from_config(config_file)


if __name__ == '__main__':
    main()
