#!/usr/bin/env python

import os
import requests
import requests_mock

from obspy import read_inventory

from seismic.inventory import update_iris_inventory, iris_query


def test_update_iris_inv_exception():
    """Test handling of RequestException in update_iris_station_xml()
    """
    with requests_mock.Mocker() as m:
        # Force RequestException to be thrown (and caught)
        m.get(requests_mock.ANY, exc=requests.exceptions.RequestException)
        update_iris_inventory.update_iris_station_xml(requests, '')


def test_update_iris_inv(tmp_path):
    """Test generation of station xml file from requests GET query, using known
       data errors encountered in real-world IRIS queries.

    :param tmp_path: Path in which temporary files can be created, auto-generated by pytest.
    :type tmp_path: pathlib2.Path
    """
    # List of illegal data strings to inject into test response XML
    ILLEGAL_ELEMENTS = [  # pylint: disable=invalid-name
        r"<Azimuth>360.1</Azimuth>",
        r"<Azimuth>362.0</Azimuth>",
        r"<Azimuth>370</Azimuth>",
        r"<Azimuth>-90</Azimuth>",
        r"<Latitude>-90.878944</Latitude>"
    ]
    with requests_mock.Mocker() as m:
        default_channel_query = iris_query.form_channel_request_url()
        # Loop over error strings at test each in the same way
        for known_error in ILLEGAL_ELEMENTS:
            if "<Azimuth>" in known_error:
                response = _get_minimal_response().replace("<Azimuth>0</Azimuth>", known_error)
            elif "<Latitude>" in known_error:
                response = _get_minimal_response().replace("<Latitude>39.895901</Latitude>", known_error)
            else:
                assert False, "Unhandled error case"
            # Set response containing erroneous data
            m.get(default_channel_query, text=response)
            # Generate IRIS station XML file
            outfile = os.path.join(str(tmp_path), 'junk.xml')
            update_iris_inventory.update_iris_station_xml(requests, outfile)
            assert os.path.exists(outfile)
            # Read file to check that the illegal data is not found in it
            with open(outfile, 'r') as f:
                file_text = f.read()
                assert known_error not in file_text
            # Re-read inventory file to check validity
            test_inv = read_inventory(outfile)
            assert len(test_inv.networks) == 1
            assert test_inv.networks[0].code == 'GE'
            assert len(test_inv.networks[0].stations) == 1
            assert test_inv.networks[0].stations[0].code == 'MAHO'
            assert len(test_inv.networks[0].stations[0].channels) == 1
            assert test_inv.networks[0].stations[0].channels[0].code == 'BHZ'
            # Clean up so we accidentally re-use wrong file in subsequent loop
            os.remove(outfile)
            assert not os.path.exists(outfile)


def _get_minimal_response():
    return u'''<?xml version="1.0" encoding="ISO-8859-1"?>
        <FDSNStationXML xmlns="http://www.fdsn.org/xml/station/1" schemaVersion="1.0" xsi:schemaLocation="http://www.fdsn.org/xml/station/1 http://www.fdsn.org/xml/station/fdsn-station-1.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:iris="http://www.fdsn.org/xml/station/1/iris">
        <Source>IRIS-DMC</Source>
        <Sender>IRIS-DMC</Sender>
        <Module>IRIS WEB SERVICE: fdsnws-station | version: 1.1.36</Module>
        <ModuleURI>http://service.iris.edu/fdsnws/station/1/query?net=GE&amp;sta=M*&amp;cha=BH*&amp;level=channel&amp;format=xml&amp;includerestricted=false&amp;includecomments=false&amp;nodata=404</ModuleURI>
        <Created>2019-05-22T03:17:10</Created>
        <Network code="GE" startDate="1991-01-01T00:00:00" endDate="2599-12-31T23:59:59" restrictedStatus="open">
        <Description>GEOFON</Description>
        <Station code="MAHO" startDate="1999-04-10T00:00:00" endDate="2001-02-13T00:00:00" restrictedStatus="open" iris:alternateNetworkCodes="_FDSN-ALL,.UNRESTRICTED">
        <Latitude>39.895901</Latitude>
        <Longitude>4.2665</Longitude>
        <Elevation>15.0</Elevation>
        <Site>
            <Name>ROA/UCM/GEOFON Station Mahon, Menorca, Spain</Name>
        </Site>
        <CreationDate>1999-04-10T00:00:00</CreationDate>
        <Channel code="BHZ" endDate="2001-02-13T00:00:00" locationCode="" restrictedStatus="open" startDate="1999-04-10T00:00:00">
            <Latitude>39.895901</Latitude>
            <Longitude>4.2665</Longitude>
            <Elevation>15</Elevation>
            <Depth>0</Depth>
            <Azimuth>0</Azimuth>
            <Dip>-90</Dip>
            <Type>TRIGGERED</Type>
            <Type>GEOPHYSICAL</Type>
            <SampleRate>2E01</SampleRate>
            <ClockDrift>2E-02</ClockDrift>
            <CalibrationUnits>
            <Name>A</Name>
            <Description>Amperes</Description>
            </CalibrationUnits>
            <Sensor>
            <Description>Streckeisen STS-2/N seismometer</Description>
            </Sensor>
            <Response>
            <InstrumentSensitivity>
            <Value>6.5006E8</Value>
            <Frequency>2E-2</Frequency>
            <InputUnits>
            <Name>M/S</Name>
            <Description>Velocity in Meters per Second</Description>
            </InputUnits>
            <OutputUnits>
            <Name>COUNTS</Name>
            <Description>Digital Counts</Description>
            </OutputUnits>
            </InstrumentSensitivity>
            </Response>
        </Channel>
        </Station>
        </Network>
        </FDSNStationXML>'''
